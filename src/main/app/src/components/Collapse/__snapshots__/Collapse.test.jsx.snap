// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
.c3 {
  margin: 0px;
  padding: 0px;
  line-height: 1.2;
  font-family: 'Roboto',sans-serif;
  color: #2a2a2a;
  font-weight: 500;
  font-size: 1.25rem;
  padding: 24px;
}

.c6 {
  font-size: 1.5rem;
}

.c7 {
  box-sizing: border-box;
  padding: 24px;
}

.c0 {
  border: 1px solid rgba(0,0,0,0.15);
  background-color: white;
}

.c4 {
  -webkit-flex: 0;
  -ms-flex: 0;
  flex: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0px 24px;
  cursor: pointer;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  border-bottom: 1px solid rgba(0,0,0,0.15);
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background-color: white;
  cursor: pointer;
}

.c8 {
  padding: 24px;
  border-top: 1px solid rgba(0,0,0,0.15);
}

.c5 {
  color: #2a2a2a;
  font-size: 2rem;
}

<styled.div
  active={false}
>
  <div
    className="c0"
  >
    <styled.div
      open={true}
    >
      <div
        className="c1"
        open={true}
      >
        <styled.div
          onClick={[Function]}
          toggleOnHeaderClick={true}
        >
          <div
            className="c2"
            onClick={[Function]}
          >
            <styled.span
              as="h5"
              p={3}
              variant="h5"
            >
              <h5
                className="c3"
              >
                Text header
              </h5>
            </styled.span>
          </div>
        </styled.div>
        <styled.div
          onClick={[Function]}
        >
          <div
            className="c4"
            onClick={[Function]}
          >
            <Styled(Component)
              icon="expand_more"
              open={true}
              role="button"
            >
              <ForwardRef
                style={
                  Object {
                    "display": AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [
                        AnimatedStyle {
                          "attach": [Function],
                          "children": Array [
                            AnimatedProps {
                              "attach": [Function],
                              "children": Array [],
                              "detach": [Function],
                              "payload": Object {
                                "children": <ForwardRef
                                  className="c5"
                                  role="button"
                                  type="expand_more"
                                />,
                                "style": [Circular],
                              },
                              "update": [Function],
                            },
                          ],
                          "detach": [Function],
                          "payload": [Circular],
                        },
                      ],
                      "done": false,
                      "lastPosition": "inline-flex",
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": "inline-flex",
                      "startTime": 1553161674015,
                      "value": "inline-flex",
                    },
                    "transform": AnimatedInterpolation {
                      "attach": [Function],
                      "calc": [Function],
                      "children": Array [
                        AnimatedStyle {
                          "attach": [Function],
                          "children": Array [
                            AnimatedProps {
                              "attach": [Function],
                              "children": Array [],
                              "detach": [Function],
                              "payload": Object {
                                "children": <ForwardRef
                                  className="c5"
                                  role="button"
                                  type="expand_more"
                                />,
                                "style": [Circular],
                              },
                              "update": [Function],
                            },
                          ],
                          "detach": [Function],
                          "payload": [Circular],
                        },
                      ],
                      "detach": [Function],
                      "payload": Array [
                        AnimatedValue {
                          "animatedStyles": Set {},
                          "children": Array [
                            [Circular],
                          ],
                          "done": false,
                          "lastPosition": 0,
                          "lastTime": undefined,
                          "lastVelocity": undefined,
                          "payload": undefined,
                          "setValue": [Function],
                          "startPosition": 0,
                          "startTime": 1553161674015,
                          "value": 0,
                        },
                      ],
                    },
                  }
                }
              >
                <span
                  style={
                    Object {
                      "display": "inline-flex",
                      "transform": "rotate(180deg)",
                    }
                  }
                >
                  <ForwardRef
                    className="c5"
                    role="button"
                    type="expand_more"
                  >
                    <styled.span
                      className="material-icons c5"
                      role="button"
                    >
                      <span
                        className="material-icons c5 c6"
                        role="button"
                      >
                        expand_more
                      </span>
                    </styled.span>
                  </ForwardRef>
                </span>
              </ForwardRef>
            </Styled(Component)>
          </div>
        </styled.div>
      </div>
    </styled.div>
    <div
      style={
        Object {
          "height": 0,
          "opacity": 1,
          "overflow": "visible",
        }
      }
    >
      <styled.div
        p={3}
      >
        <div
          className="c7"
        >
          <div>
            Collapse children
          </div>
        </div>
      </styled.div>
      <styled.div>
        <div
          className="c8"
        >
          <button>
            Footer button
          </button>
        </div>
      </styled.div>
    </div>
  </div>
</styled.div>
`;

exports[`renders correctly 2`] = `
.c5 {
  font-size: 1.5rem;
}

.c6 {
  box-sizing: border-box;
  padding: 24px;
}

.c0 {
  border: 1px solid rgba(0,0,0,0.15);
  background-color: white;
}

.c3 {
  -webkit-flex: 0;
  -ms-flex: 0;
  flex: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0px 24px;
  cursor: pointer;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  border-bottom: 1px solid rgba(0,0,0,0.15);
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background-color: white;
  cursor: pointer;
}

.c7 {
  padding: 24px;
  border-top: 1px solid rgba(0,0,0,0.15);
}

.c4 {
  color: #2a2a2a;
  font-size: 2rem;
}

<styled.div
  active={false}
>
  <div
    className="c0"
  >
    <styled.div
      open={true}
    >
      <div
        className="c1"
        open={true}
      >
        <styled.div
          onClick={[Function]}
          toggleOnHeaderClick={true}
        >
          <div
            className="c2"
            onClick={[Function]}
          >
            <div>
              Element header
            </div>
          </div>
        </styled.div>
        <styled.div
          onClick={[Function]}
        >
          <div
            className="c3"
            onClick={[Function]}
          >
            <Styled(Component)
              icon="expand_more"
              open={true}
              role="button"
            >
              <ForwardRef
                style={
                  Object {
                    "display": AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [
                        AnimatedStyle {
                          "attach": [Function],
                          "children": Array [
                            AnimatedProps {
                              "attach": [Function],
                              "children": Array [],
                              "detach": [Function],
                              "payload": Object {
                                "children": <ForwardRef
                                  className="c4"
                                  role="button"
                                  type="expand_more"
                                />,
                                "style": [Circular],
                              },
                              "update": [Function],
                            },
                          ],
                          "detach": [Function],
                          "payload": [Circular],
                        },
                      ],
                      "done": false,
                      "lastPosition": "inline-flex",
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": "inline-flex",
                      "startTime": 1553161674015,
                      "value": "inline-flex",
                    },
                    "transform": AnimatedInterpolation {
                      "attach": [Function],
                      "calc": [Function],
                      "children": Array [
                        AnimatedStyle {
                          "attach": [Function],
                          "children": Array [
                            AnimatedProps {
                              "attach": [Function],
                              "children": Array [],
                              "detach": [Function],
                              "payload": Object {
                                "children": <ForwardRef
                                  className="c4"
                                  role="button"
                                  type="expand_more"
                                />,
                                "style": [Circular],
                              },
                              "update": [Function],
                            },
                          ],
                          "detach": [Function],
                          "payload": [Circular],
                        },
                      ],
                      "detach": [Function],
                      "payload": Array [
                        AnimatedValue {
                          "animatedStyles": Set {},
                          "children": Array [
                            [Circular],
                          ],
                          "done": false,
                          "lastPosition": 0,
                          "lastTime": undefined,
                          "lastVelocity": undefined,
                          "payload": undefined,
                          "setValue": [Function],
                          "startPosition": 0,
                          "startTime": 1553161674015,
                          "value": 0,
                        },
                      ],
                    },
                  }
                }
              >
                <span
                  style={
                    Object {
                      "display": "inline-flex",
                      "transform": "rotate(180deg)",
                    }
                  }
                >
                  <ForwardRef
                    className="c4"
                    role="button"
                    type="expand_more"
                  >
                    <styled.span
                      className="material-icons c4"
                      role="button"
                    >
                      <span
                        className="material-icons c4 c5"
                        role="button"
                      >
                        expand_more
                      </span>
                    </styled.span>
                  </ForwardRef>
                </span>
              </ForwardRef>
            </Styled(Component)>
          </div>
        </styled.div>
      </div>
    </styled.div>
    <div
      style={
        Object {
          "height": 0,
          "opacity": 1,
          "overflow": "visible",
        }
      }
    >
      <styled.div
        p={3}
      >
        <div
          className="c6"
        >
          <div>
            Collapse children
          </div>
        </div>
      </styled.div>
      <styled.div>
        <div
          className="c7"
        >
          <button>
            Footer button
          </button>
        </div>
      </styled.div>
    </div>
  </div>
</styled.div>
`;

exports[`renders correctly when closed 1`] = `
.c3 {
  margin: 0px;
  padding: 0px;
  line-height: 1.2;
  font-family: 'Roboto',sans-serif;
  color: #2a2a2a;
  font-weight: 500;
  font-size: 1.25rem;
  padding: 24px;
}

.c6 {
  font-size: 1.5rem;
}

.c7 {
  box-sizing: border-box;
  padding: 24px;
}

.c0 {
  border: 1px solid rgba(0,0,0,0.15);
  background-color: white;
}

.c4 {
  -webkit-flex: 0;
  -ms-flex: 0;
  flex: 0;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  padding: 0px 24px;
  cursor: pointer;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.c2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
  background-color: white;
  cursor: pointer;
}

.c8 {
  padding: 24px;
  border-top: 1px solid rgba(0,0,0,0.15);
}

.c5 {
  color: #2a2a2a;
  font-size: 2rem;
}

<styled.div
  active={false}
>
  <div
    className="c0"
  >
    <styled.div
      open={false}
    >
      <div
        className="c1"
        open={false}
      >
        <styled.div
          onClick={[Function]}
          toggleOnHeaderClick={true}
        >
          <div
            className="c2"
            onClick={[Function]}
          >
            <styled.span
              as="h5"
              p={3}
              variant="h5"
            >
              <h5
                className="c3"
              >
                Header
              </h5>
            </styled.span>
          </div>
        </styled.div>
        <styled.div
          onClick={[Function]}
        >
          <div
            className="c4"
            onClick={[Function]}
          >
            <Styled(Component)
              icon="expand_more"
              open={false}
              role="button"
            >
              <ForwardRef
                style={
                  Object {
                    "display": AnimatedValue {
                      "animatedStyles": Set {},
                      "children": Array [
                        AnimatedStyle {
                          "attach": [Function],
                          "children": Array [
                            AnimatedProps {
                              "attach": [Function],
                              "children": Array [],
                              "detach": [Function],
                              "payload": Object {
                                "children": <ForwardRef
                                  className="c5"
                                  role="button"
                                  type="expand_more"
                                />,
                                "style": [Circular],
                              },
                              "update": [Function],
                            },
                          ],
                          "detach": [Function],
                          "payload": [Circular],
                        },
                      ],
                      "done": false,
                      "lastPosition": "inline-flex",
                      "lastTime": undefined,
                      "lastVelocity": undefined,
                      "payload": undefined,
                      "setValue": [Function],
                      "startPosition": "inline-flex",
                      "startTime": 1553161674015,
                      "value": "inline-flex",
                    },
                    "transform": AnimatedInterpolation {
                      "attach": [Function],
                      "calc": [Function],
                      "children": Array [
                        AnimatedStyle {
                          "attach": [Function],
                          "children": Array [
                            AnimatedProps {
                              "attach": [Function],
                              "children": Array [],
                              "detach": [Function],
                              "payload": Object {
                                "children": <ForwardRef
                                  className="c5"
                                  role="button"
                                  type="expand_more"
                                />,
                                "style": [Circular],
                              },
                              "update": [Function],
                            },
                          ],
                          "detach": [Function],
                          "payload": [Circular],
                        },
                      ],
                      "detach": [Function],
                      "payload": Array [
                        AnimatedValue {
                          "animatedStyles": Set {},
                          "children": Array [
                            [Circular],
                          ],
                          "done": false,
                          "lastPosition": 0,
                          "lastTime": undefined,
                          "lastVelocity": undefined,
                          "payload": undefined,
                          "setValue": [Function],
                          "startPosition": 0,
                          "startTime": 1553161674015,
                          "value": 0,
                        },
                      ],
                    },
                  }
                }
              >
                <span
                  style={
                    Object {
                      "display": "inline-flex",
                      "transform": "rotate(0deg)",
                    }
                  }
                >
                  <ForwardRef
                    className="c5"
                    role="button"
                    type="expand_more"
                  >
                    <styled.span
                      className="material-icons c5"
                      role="button"
                    >
                      <span
                        className="material-icons c5 c6"
                        role="button"
                      >
                        expand_more
                      </span>
                    </styled.span>
                  </ForwardRef>
                </span>
              </ForwardRef>
            </Styled(Component)>
          </div>
        </styled.div>
      </div>
    </styled.div>
    <div
      style={
        Object {
          "height": 0,
          "opacity": 0,
          "overflow": "hidden",
        }
      }
    >
      <styled.div
        p={3}
      >
        <div
          className="c7"
        >
          <div>
            Hello world!
          </div>
        </div>
      </styled.div>
      <styled.div>
        <div
          className="c8"
        >
          <div>
            footer
          </div>
        </div>
      </styled.div>
    </div>
  </div>
</styled.div>
`;
